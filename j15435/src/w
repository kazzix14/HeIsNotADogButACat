/* 
 * image2d.c
 *
 * (C) 2018 Kazuma Murata
 * 
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#define GLUT_DISABLE_ATEXIT_HACK

#include <stdio.h>
#include <stddef.h>

#include "debug.h"
#include "timer.h"
#include "transform2d.h"
#include "image2d.h"
#include "animation2d.h"

static struct everyTypeNeedToHaveAPointerToThisStructAtTheHeadOfTheStruct etnthapttsathots =
{
	.isVisible = true,
	.putFunc = (void*)Animation2D_play
};

struct frame
{
	int numVars;
	void** variables;
	void** values;
	size_t* sizes;
	double length;
	char* smoothingTypes; // 0:no smoothing, 1:smoothing
};


struct private_variables
{
	unsigned int anim_length; // frame num
	unsigned int current_frame;

	double frame_time_current;
	double* frame_time; // second
	struct frame* frm;
};

Animation2D* Animation2D_new()
{
	// allocate memories
	Animation2D* p_anim;
	p_anim = (Animation2D*)malloc(sizeof(Animation2D));
	p_anim->pv = (struct private_variables*)malloc(sizeof(struct private_variables));
	p_anim->transform = Transform2D_new();

	if(p_anim == NULL || p_anim->pv == NULL || p_anim->transform == NULL)
		return NULL;

	p_anim->pEtnthapttsathots = &etnthapttsathots;
	p_anim->pv->anim_length = 0;
	p_anim->pv->current_frame = 0;

	return p_anim;
}

void Animation2D_add_frame(Animation2D* const this)
{
	if(this->pv->anim_length == 0)
	{
		this->pv->frm = (struct frame*)malloc(sizeof(struct frame));
	}
	else
	{
		this->pv->frm = (struct frame*)realloc(this->pv->frm, sizeof(struct frame) * (this->pv->anim_length+1));
	}

	this->pv->frm[this->pv->anim_length].numVars = 0;
	this->pv->frm[this->pv->anim_length].length = 1;

	this->pv->anim_length++;

}

void Animation2D_set_frame_length(Animation2D* const this, const unsigned int index, const double length)
{
	this->pv->frm[index].length = length;
}

//
void Animation2D_add_animated_variable(Animation2D* const this, const unsigned int index, void* const varaddr, const void* valaddr, const size_t sizeofval, const char smoothingType)
{
	if(this->pv->frm[index].numVars == 0)
	{
		this->pv->frm[index].variables = (void**)malloc(sizeof(void*));
		this->pv->frm[index].values = (void**)malloc(sizeof(void*)); 
		this->pv->frm[index].sizes = (size_t*)malloc(sizeof(size_t));
		this->pv->frm[index].smoothingTypes = (char*)malloc(sizeof(char));
	}
	else
	{
		this->pv->frm[index].variables = (void**)realloc(this->pv->frm[index].values, sizeof(void*) * (this->pv->frm[index].numVars+1));
		this->pv->frm[index].values = (void**)realloc(this->pv->frm[index].values, sizeof(void*) * (this->pv->frm[index].numVars+1));
		this->pv->frm[index].sizes = (size_t*)realloc(this->pv->frm[index].sizes, sizeof(size_t) * (this->pv->frm[index].numVars+1));
		this->pv->frm[index].smoothingTypes = (char*)realloc(this->pv->frm[index].smoothingTypes, sizeof(char) * (this->pv->frm[index].numVars+1));
	}
	
	this->pv->frm[index].values[this->pv->frm[index].numVars] = (void*) malloc(sizeofval);
	memcpy(this->pv->frm[index].values[this->pv->frm[index].numVars], valaddr, sizeofval);

	this->pv->frm[index].variables[this->pv->frm[index].numVars] = varaddr;
	this->pv->frm[index].sizes[this->pv->frm[index].numVars] = sizeofval;
	this->pv->frm[index].smoothingTypes[this->pv->frm[index].numVars] = smoothingType;
	this->pv->frm[index].numVars++;
}

void Animation2D_release(Animation2D* const p_this)
{
	/*
	release_images(p_this, 0, p_this->pv->anim_length);
	free(p_this->pv->p_imgs);
	free(p_this->pv->frm);
	free(p_this->pv->frame_time);
	free(p_this->pv);
	free(p_this->transform);
	free(p_this);
	*/
}
void Animation2D_play(Animation2D* const p_this)
{
	for(int i = 0; i < p_this->pv->frm[p_this->pv->current_frame].numVars; i++)
	{
		if(p_this->pv->frm[p_this->pv->current_frame].smoothingType[i] == ANIMATION_LINER_SMOOTHING_FOR_DOUBLE)
		{
			void* tmp;
			memcpy(tmp,
				p_this->pv->frm[p_this->pv->current_frame].variables[i],
				p_this->pv->frm[p_this->pv->current_frame].sizes[i]);

			(double)tmp += (double)p_this->pv->frm[p_this->pv->current_frame].variables[i] * p_this->pv->frame_time_current/p_this->pv->frm[p_this->pv->current_frame].length;

			memcpy(tmp,
				p_this->pv->frm[p_this->pv->current_frame].variables[i],
				p_this->pv->frm[p_this->pv->current_frame].sizes[i]);
		}
	}

	if(p_this->pv->frame_time_current >= p_this->pv->frm[p_this->pv->current_frame].length)
	{
		// copy all data
		for(int i = 0; i < p_this->pv->frm[p_this->pv->current_frame].numVars; i++)
		{
			memcpy(p_this->pv->frm[p_this->pv->current_frame].variables[i],
				p_this->pv->frm[p_this->pv->current_frame].values[i],
				p_this->pv->frm[p_this->pv->current_frame].sizes[i]);
		}
		
		p_this->pv->frame_time_current = 0.0;
		if(p_this->pv->current_frame == p_this->pv->anim_length-1)
			p_this->pv->current_frame = 0;
		else
			p_this->pv->current_frame++;

	}

	double tc;
	Timer_get_spf(&tc);
	p_this->pv->frame_time_current += tc;
}
